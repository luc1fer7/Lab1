//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Grammar.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="GrammarParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public interface IGrammarVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammarParser.rule"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRule([NotNull] GrammarParser.RuleContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MaxOf</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMaxOf([NotNull] GrammarParser.MaxOfContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NegativeNumber</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNegativeNumber([NotNull] GrammarParser.NegativeNumberContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Wrong</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWrong([NotNull] GrammarParser.WrongContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumber([NotNull] GrammarParser.NumberContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AdditionSubtraction</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditionSubtraction([NotNull] GrammarParser.AdditionSubtractionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MinOf</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMinOf([NotNull] GrammarParser.MinOfContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>InPower</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInPower([NotNull] GrammarParser.InPowerContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>InBrackets</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInBrackets([NotNull] GrammarParser.InBracketsContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MultiplicationDivision</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicationDivision([NotNull] GrammarParser.MultiplicationDivisionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>Cell</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCell([NotNull] GrammarParser.CellContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>OnDiv</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOnDiv([NotNull] GrammarParser.OnDivContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>OnModulo</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOnModulo([NotNull] GrammarParser.OnModuloContext context);
}
