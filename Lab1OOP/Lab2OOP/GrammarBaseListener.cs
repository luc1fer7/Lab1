//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Grammar.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IGrammarListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class GrammarBaseListener : IGrammarListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.rule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRule([NotNull] GrammarParser.RuleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.rule"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRule([NotNull] GrammarParser.RuleContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MaxOf</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMaxOf([NotNull] GrammarParser.MaxOfContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MaxOf</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMaxOf([NotNull] GrammarParser.MaxOfContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NegativeNumber</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegativeNumber([NotNull] GrammarParser.NegativeNumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NegativeNumber</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegativeNumber([NotNull] GrammarParser.NegativeNumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Wrong</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWrong([NotNull] GrammarParser.WrongContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Wrong</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWrong([NotNull] GrammarParser.WrongContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumber([NotNull] GrammarParser.NumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumber([NotNull] GrammarParser.NumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AdditionSubtraction</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditionSubtraction([NotNull] GrammarParser.AdditionSubtractionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditionSubtraction</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditionSubtraction([NotNull] GrammarParser.AdditionSubtractionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MinOf</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMinOf([NotNull] GrammarParser.MinOfContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MinOf</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMinOf([NotNull] GrammarParser.MinOfContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>InPower</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInPower([NotNull] GrammarParser.InPowerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>InPower</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInPower([NotNull] GrammarParser.InPowerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>InBrackets</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInBrackets([NotNull] GrammarParser.InBracketsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>InBrackets</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInBrackets([NotNull] GrammarParser.InBracketsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicationDivision</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicationDivision([NotNull] GrammarParser.MultiplicationDivisionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicationDivision</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicationDivision([NotNull] GrammarParser.MultiplicationDivisionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Cell</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCell([NotNull] GrammarParser.CellContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Cell</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCell([NotNull] GrammarParser.CellContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>OnDiv</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOnDiv([NotNull] GrammarParser.OnDivContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>OnDiv</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOnDiv([NotNull] GrammarParser.OnDivContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>OnModulo</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOnModulo([NotNull] GrammarParser.OnModuloContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>OnModulo</c>
	/// labeled alternative in <see cref="GrammarParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOnModulo([NotNull] GrammarParser.OnModuloContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
